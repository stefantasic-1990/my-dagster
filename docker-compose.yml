services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster-postgres:
    image: postgres:11
    container_name: dagster-postgres
    environment:
      POSTGRES_USER: "dagster_user"
      POSTGRES_PASSWORD: "dagster_password"
      POSTGRES_DB: "dagster_database"
    networks:
      - dagster-bridge-network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
      # webserver.
  dagster-code-location:
    build:
      context: .
      dockerfile: ./Dockerfile-dagster-code-location
    container_name: dagster-code-location
    image: dagster-code-location:latest
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "dagster_user"
      DAGSTER_POSTGRES_PASSWORD: "dagster_password"
      DAGSTER_POSTGRES_DB: "dagster_database"
      DAGSTER_CURRENT_IMAGE: "dagster-code-location:latest"
    volumes:
      - ./repo.py:/opt/dagster/app/repo.py
    networks:
      - dagster-bridge-network

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster-webserver:
    build:
      context: .
      dockerfile: ./Dockerfile-dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster-webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_PG_USERNAME: "dagster_user"
      DAGSTER_PG_PASSWORD: "dagster_password"
      DAGSTER_PG_HOST: "dagster-postgres"
      DAGSTER_PG_DB: "dagster_database"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster-bridge-network
    depends_on:
      - dagster-postgres
      - dagster-code-location

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster-daemon:
    build:
      context: .
      dockerfile: ./Dockerfile-dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster-daemon
    restart: on-failure
    environment:
      DAGSTER_PG_USERNAME: "dagster_user"
      DAGSTER_PG_PASSWORD: "dagster_password"
      DAGSTER_PG_HOST: "dagster-postgres"
      DAGSTER_PG_DB: "dagster_database"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster-bridge-network
    depends_on:
      - dagster-postgres
      - dagster-code-location

networks:
  dagster-bridge-network:
    driver: bridge
    name: dagster-bridge-network